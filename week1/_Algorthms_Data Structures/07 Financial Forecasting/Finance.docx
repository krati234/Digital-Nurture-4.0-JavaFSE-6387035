

Concept of Recursion (with Financial Forecasting Example)

Recursion is a programming technique where a function calls itself to solve smaller sub-problems of the same nature. It helps simplify complex logic into smaller, readable units — and is particularly powerful in domains such as mathematical modeling, tree processing, and dynamic programming.

---

Components of Recursion in Our Code

In the financial forecasting code:

1. Base Case
   Prevents infinite recursion and gives a direct answer to the simplest version of the problem:

   if (years == 0) return currentValue;

2. Recursive Case
   Solves the problem by referring to a smaller instance:

   return (1 + growthRate) * futureValueRecursive(currentValue, growthRate, years - 1);

---

Example: Financial Forecasting Using Recursion

The recursive method calculates the future value of an investment using:

FV(n) = (1 + r) × FV(n - 1)

Code Snippet:

public static double futureValueRecursive(double currentValue, double growthRate, int years) {
    if (years == 0) return currentValue;
    return (1 + growthRate) * futureValueRecursive(currentValue, growthRate, years - 1);
}

This mirrors the real-world idea of compound interest, where each year's growth is based on the previous year's value.

---

How Recursion Simplifies the Problem

1. Divide and Conquer

   Breaks a large problem into smaller sub-problems (e.g., forecasting year by year).

2. Cleaner Logic

   Eliminates the need for explicit loops when the problem follows a recursive pattern.

3. Natural Mapping

   Forecasting over years is inherently sequential, which suits recursion well.

4. Code Readability

   Recursive code tends to be shorter and easier to map to mathematical definitions.

---

Drawbacks of Recursion

Stack Overflow
  Deep recursion may exceed the call stack limit for large input sizes (e.g., forecasting over thousands of years).

Redundant Computation
  Without optimization, the same values can be recalculated multiple times.

Debugging Difficulty
  Errors in recursion can be harder to trace due to call stack complexity.

---

Time and Space Complexity (Based on Provided Code)

Recursive Version – futureValueRecursive

Time Complexity: O(n)

  One call per year (n recursive calls).
Space Complexity: O(n)

  Due to the call stack of n frames.

---

Optimized Version with Memoization – futureValueMemo

public static double futureValueMemo(double currentValue, double growthRate, int years, Double[] memo) {
    if (years == 0) return currentValue;
    if (memo[years] != null) return memo[years];
    memo[years] = (1 + growthRate) * futureValueMemo(currentValue, growthRate, years - 1, memo);
    return memo[years];
}

Time Complexity: O(n)
  Each year's value is computed once and cached.

Space Complexity: O(n)
  From both call stack and memo array.

---

Optimization Strategies

1. Iterative Version – futureValueIterative

public static double futureValueIterative(double principal, double rate, int years) {
    for (int i = 0; i < years; i++) {
        principal *= (1 + rate);
    }
    return principal;
}

Time Complexity: O(n)
Space Complexity: O(1)
More efficient for large n and avoids stack overflows.

---

2. Formula-Based Version – futureValueFormula

public static double futureValueFormula(double principal, double rate, int years) {
    return principal * Math.pow(1 + rate, years);
}

Time Complexity: O(1)
Space Complexity: O(1)
Most efficient approach — ideal when precision from floating-point math is acceptable.

---

Comparison Summary

| Method             | Time Complexity | Space Complexity | Strengths                    |
| ------------------ | --------------- | ---------------- | ---------------------------- |
| Recursive          | O(n)            | O(n)             | Clear logic, natural mapping |
| Memoized Recursive | O(n)            | O(n)             | Avoids recomputation         |
| Iterative          | O(n)            | O(1)             | Efficient, stack-safe        |
| Formula-based      | O(1)            | O(1)             | Fastest, most compact        |

---

Final Notes

Recursion is great for expressing mathematical logic like compound growth, as shown in our forecasting model.
However, for real-world financial applications that involve large datasets or long durations, using an iterative or formula-based approach is typically more performant.
Memoization is helpful when the recursive function is reused with overlapping sub-problems — though it's less beneficial for strictly linear recurrence like compound interest.



