PL/SQL Exercises - Solutions
Exercise 1: Control Structures
Scenario 1: Senior Citizen Interest Discount
The bank wants to apply a discount to loan interest rates for customers above 60 years old.

PL/SQL Block:

BEGIN
    FOR rec IN (
        SELECT LoanID
        FROM Loans l
        JOIN Customers c ON l.CustomerID = c.CustomerID
        WHERE MONTHS_BETWEEN(SYSDATE, c.DOB)/12 > 60
    ) LOOP
        UPDATE Loans
        SET InterestRate = InterestRate * 0.99
        WHERE LoanID = rec.LoanID;
    END LOOP;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Interest rate discount applied for senior citizens.');
END;
/
Scenario 2: VIP Status Update
Set IsVIP to 'Y' for customers with balance over $10,000.

PL/SQL Block:

BEGIN
    UPDATE Customers
    SET IsVIP = 'Y'
    WHERE Balance > 10000 AND NVL(IsVIP, 'N') <> 'Y';

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('VIP status updated for eligible customers.');
END;
/
Scenario 3: Loan Due Reminder
Print reminders for loans due within the next 30 days.

PL/SQL Block:

BEGIN
    FOR rec IN (
        SELECT c.Name, l.LoanID, l.EndDate
        FROM Loans l
        JOIN Customers c ON l.CustomerID = c.CustomerID
        WHERE l.EndDate BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE + 30)
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Reminder: Loan #' || rec.LoanID || ' for ' || rec.Name ||
                             ' is due on ' || TO_CHAR(rec.EndDate, 'DD-MON-YYYY'));
    END LOOP;
END;
/
Exercise 2: Stored Procedures
Scenario 1: Process Monthly Interest
Procedure to apply 1% monthly interest to all Savings accounts.

Stored Procedure:

CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest
AS
BEGIN
    UPDATE Accounts
    SET Balance = Balance * 1.01,
        LastModified = SYSDATE
    WHERE AccountType = 'Savings';

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('1% interest applied to all Savings accounts.');
END;
/
Scenario 2: Update Employee Bonus
Procedure to increase salaries by a percentage in a specific department.

Stored Procedure:

CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus(
    p_Department IN Employees.Department%TYPE,
    p_BonusPct   IN NUMBER
)
AS
BEGIN
    UPDATE Employees
    SET Salary = Salary * (1 + p_BonusPct / 100)
    WHERE Department = p_Department;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Bonus of ' || p_BonusPct || '% applied to department: ' || p_Department);
END;
/
Scenario 3: Transfer Funds Between Accounts
Procedure to safely transfer funds from one account to another with sufficient balance check.

Stored Procedure:

CREATE OR REPLACE PROCEDURE TransferFunds(
    p_FromAccountID IN Accounts.AccountID%TYPE,
    p_ToAccountID   IN Accounts.AccountID%TYPE,
    p_Amount        IN NUMBER
)
AS
    v_FromBalance Accounts.Balance%TYPE;
BEGIN
    SELECT Balance INTO v_FromBalance
    FROM Accounts
    WHERE AccountID = p_FromAccountID
    FOR UPDATE;

    IF v_FromBalance < p_Amount THEN
        RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds in source account.');
    END IF;

    UPDATE Accounts
    SET Balance = Balance - p_Amount,
        LastModified = SYSDATE
    WHERE AccountID = p_FromAccountID;

    UPDATE Accounts
    SET Balance = Balance + p_Amount,
        LastModified = SYSDATE
    WHERE AccountID = p_ToAccountID;

    INSERT INTO Transactions(TransactionID, AccountID, TransactionDate, Amount, TransactionType)
    VALUES (3, p_FromAccountID, SYSDATE, p_Amount, 'TransferOut');

    INSERT INTO Transactions(TransactionID, AccountID, TransactionDate, Amount, TransactionType)
    VALUES (4, p_ToAccountID, SYSDATE, p_Amount, 'TransferIn');

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Transferred ' || p_Amount || ' from Account ' || p_FromAccountID || ' to Account ' || p_ToAccountID);
END;
/